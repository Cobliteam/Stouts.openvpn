---

- block:
  - name: Extract easy-rsa files
    unarchive: src=easy-rsa.tar.gz dest="{{ openvpn_etcdir }}"
    when: not openvpn_use_system_easyrsa

  - name: Check if easy-rsa 2.x is available from the system
    stat: path=/usr/share/easy-rsa/build-ca
    register: openvpn_easyrsa_check
    when: openvpn_use_system_easyrsa

  - fail:
      msg: >
        EasyRSA 2.x is not present in /usr/share/easy-rsa.
        Ensure the easy-rsa package is installed or disable the `openvpn_use_system_easyrsa` option.
    when: openvpn_use_system_easyrsa and not openvpn_easyrsa_check.stat.exists

  - name: Generate vars file
    template:
      src: "vars.j2"
      dest: "{{ openvpn_etcdir }}/vars"
      mode: 0700
  
  - name: Create key directory
    file:
      path: "{{ openvpn_keydir }}"
      state: directory
      mode: 0700

  - name: Create key index file
    copy:
      dest: "{{ openvpn_keydir }}/index.txt"
      mode: 0700
      content: ""
      force: no
  
  - name: Create serial file
    copy:
      dest: "{{ openvpn_keydir }}/serial"
      mode: 0700
      content: "01"
      force: no

  - name: Initialize CA
    shell: . "{{ openvpn_etcdir }}/vars" && "$EASY_RSA/pkitool" --initca
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/ca.crt"
  
  - name: Create server certificate
    shell: . "{{openvpn_etcdir}}/vars" && "$EASY_RSA/pkitool" --server server
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/server.crt"
      
  - name: Create DH parameters
    command: openssl dhparam -out '{{ openvpn_keydir }}/dh{{ openvpn_key_size }}.pem' {{ openvpn_key_size }}
    args:
      creates: "{{ openvpn_keydir }}/dh{{ openvpn_key_size }}.pem"

  - name: Generate tls-auth key
    command: openvpn --genkey --secret "{{ openvpn_tls_key }}"
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/{{ openvpn_tls_key }}"
    when: openvpn_tls_auth

  - name: Generate Clients keys
    shell: . "{{ openvpn_etcdir }}/vars" && "$EASY_RSA/pkitool" "{{ item }}"
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/{{ item }}.crt"
    with_items: "{{ openvpn_clients }}"

  - name: Revoke Clients keys
    shell: >
      . "{{ openvpn_etcdir }}/vars" && \
      "$EASY_RSA/revoke-full" "{{ item }}" && \
      rm -f '{{ openvpn_keydir }}/{{ item }}'{.crt,.csr,.key,.openvpn,.tar.gz}
    args:
      chdir: "{{ openvpn_keydir }}" 
      removes: "{{ openvpn_keydir }}/{{ item }}.crt"
    with_items: "{{ openvpn_clients_revoke }}"

  - name: Create client configuration directory if requested
    file:
      path: "{{ openvpn_client_config_dir }}"
      mode: 0755
      state: directory
    when: openvpn_client_config_dir is defined

  - name: Generate Clients configurations
    template: src=client.conf.j2 dest="{{ openvpn_keydir}}/{{ item }}.ovpn"
    with_items: "{{ openvpn_clients }}"
    notify: openvpn pack clients
    register: openvpn_clients_changed
  when: not openvpn_skip_keys or openvpn_only_keys

- block:
  - name: Check if crl.pem exists
    stat: path={{openvpn_keydir}}/crl.pem
    register: crl_pem_file

  - name: Setup PAM
    template: src=openvpn.pam.j2 dest=/etc/pam.d/openvpn
    when: openvpn_use_pam

  - name: Configure users
    htpasswd: path={{openvpn_etcdir}}/users name={{item.name}} password={{item.password}} crypt_scheme=des_crypt
    with_items: "{{ openvpn_use_pam_users }}"

  - name: Setup LDAP
    template: src=auth-ldap.conf.j2 dest=/etc/openvpn/auth-ldap.conf
    when: openvpn_use_ldap

  - name: Setup simple authentication
    template:
      src: auth-client.sh.j2
      dest: "{{openvpn_etcdir}}/auth-client.sh"
      mode: 0755
    when: openvpn_simple_auth and openvpn_simple_auth_password
    notify: [openvpn restart]

  - name: Configure server
    template: src=server.conf.j2 dest={{openvpn_etcdir}}/server.conf
    notify: [openvpn restart]

  - name: Ensure openvpn key dir has the right permission
    file: path={{openvpn_keydir}} state=directory mode=0700 owner={{openvpn_user}}

  - name: Set ip forwarding in the sysctl file and reload if necessary
    sysctl: name="net.ipv4.ip_forward" value=1 sysctl_set=yes state=present reload=yes
  when: not openvpn_only_keys
