---

- block:
  - name: Extract easy-rsa files
    unarchive:
      src: easy-rsa.tar.gz
      dest: "{{ openvpn_etcdir }}"
      mode: u=rwX,go=rX
      keep_newer: yes
    when: not openvpn_use_system_easyrsa

  - name: Check if easy-rsa 2.x is available from the system
    stat: path=/usr/share/easy-rsa/build-ca
    register: openvpn_easyrsa_check
    when: openvpn_use_system_easyrsa

  - fail:
      msg: >
        EasyRSA 2.x is not present in /usr/share/easy-rsa.
        Ensure the easy-rsa package is installed or disable the `openvpn_use_system_easyrsa` option.
    when: openvpn_use_system_easyrsa and not openvpn_easyrsa_check.stat.exists

  - set_fact:
      openvpn_easyrsa_dir: >-
        {{ '/usr/share/easy-rsa' if openvpn_use_system_easyrsa else openvpn_etcdir + '/easy-rsa' }}

  - name: Copy OpenSSL CNF to OpenVPN dir
    copy:
      src: "{{ openvpn_easyrsa_dir }}/openssl-1.0.0.cnf"
      dest: "{{ openvpn_etcdir }}/openssl.cnf"
      remote_src: yes

  - name: Generate vars file
    template:
      src: vars.j2
      dest: "{{ openvpn_etcdir }}/vars"
      mode: 0600

  - name: Create key directory
    file:
      path: "{{ openvpn_keydir }}"
      state: directory
      mode: 0700

  - name: Create key index file
    copy:
      dest: "{{ openvpn_keydir }}/index.txt"
      mode: 0600
      content: ""
      force: no
    notify: openvpn restart

  - name: Create serial file
    copy:
      dest: "{{ openvpn_keydir }}/serial"
      mode: 0600
      content: "01"
      force: no
    notify: openvpn restart

  - name: Initialize CA
    shell: . "{{ openvpn_etcdir }}/vars" && "$EASY_RSA/pkitool" --initca
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/ca.crt"
    notify: [openvpn pack clients, openvpn restart]

  - name: Initialize revocation list
    shell: >
      . "{{ openvpn_etcdir }}/vars" &&
      KEY_OU= KEY_CN= KEY_NAME= KEY_ALTNAMES= openssl ca -config "$KEY_CONFIG" -gencrl -out crl.pem
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/crl.pem"
    notify: openvpn restart

  - name: Create server certificate
    shell: . "{{openvpn_etcdir}}/vars" && "$EASY_RSA/pkitool" --server server
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/server.crt"
    notify: openvpn restart

  - name: Create DH parameters
    command: openssl dhparam -out '{{ openvpn_keydir }}/dh{{ openvpn_key_size }}.pem' {{ openvpn_key_size }}
    args:
      creates: "{{ openvpn_keydir }}/dh{{ openvpn_key_size }}.pem"
    notify: openvpn restart

  - name: Generate tls-auth key
    template:
      src: tls_auth_key.j2
      dest: "{{ openvpn_keydir }}/{{ openvpn_tls_key }}"
      force: no
      mode: 0600
    vars:
      key_bits: 2048
    register: openvpn_tls_key_result
    notify: [openvpn pack clients, openvpn restart]

  - name: Generate Clients keys
    shell: . "{{ openvpn_etcdir }}/vars" && "$EASY_RSA/pkitool" "{{ item }}"
    args:
      chdir: "{{ openvpn_keydir }}"
      creates: "{{ openvpn_keydir }}/{{ item }}.crt"
    with_items: "{{ openvpn_clients }}"
    notify: openvpn restart

  - name: Revoke Clients keys
    shell: >-
      if ! [[ -f crl.pem && -f "{{ item }}.crt" ]]; then
        exit 20;
      fi;
      if openssl verify -CAfile <(cat ca.crt crl.pem) -crl_check "{{ item }}.crt" 2>&1 | grep revoked; then
        exit 20;
      fi;
      . "{{ openvpn_etcdir }}/vars" || exit 1;
      "$EASY_RSA/revoke-full" "{{ item }}";
      ret=$?;
      if [ $ret -eq 2 ]; then
        ret=0;
      fi;
      exit $ret
    args:
      executable: /bin/bash
      chdir: "{{ openvpn_keydir }}"
    register: openvpn_revoke_cmd
    failed_when: openvpn_revoke_cmd.rc not in (0, 20)
    changed_when: openvpn_revoke_cmd.rc == 0
    with_items: "{{ openvpn_clients_revoke }}"

  - name: Clear revocation leftovers
    file:
      path: "{{ openvpn_keydir }}/revoke-test.pem"
      state: absent
    changed_when: False

  - name: Create client configuration directory if requested
    file:
      path: "{{ openvpn_client_config_dir }}"
      mode: 0755
      state: directory
    when: openvpn_client_config_dir is defined

  - name: Generate Clients configurations
    template: src=client.conf.j2 dest="{{ openvpn_keydir }}/{{ item }}.ovpn"
    with_items: "{{ openvpn_clients }}"
    notify: openvpn pack clients
    register: openvpn_clients_changed

  - name: Check if any clients have not been packed
    stat: path="{{ openvpn_keydir}}/{{ item }}.zip" get_checksum=no
    with_items: "{{ openvpn_clients }}"
    register: openvpn_clients_missing
    changed_when: not openvpn_clients_missing.stat.exists
    notify: openvpn pack clients

  when: not openvpn_skip_keys or openvpn_only_keys

- block:
  - name: Check if crl.pem exists
    stat: path={{openvpn_keydir}}/crl.pem
    register: crl_pem_file

  - name: Setup PAM
    template: src=openvpn.pam.j2 dest=/etc/pam.d/openvpn
    when: openvpn_use_pam

  - name: Configure users
    htpasswd: path={{openvpn_etcdir}}/users name={{item.name}} password={{item.password}} crypt_scheme=des_crypt
    with_items: "{{ openvpn_use_pam_users }}"

  - name: Setup LDAP
    template: src=auth-ldap.conf.j2 dest=/etc/openvpn/auth-ldap.conf
    when: openvpn_use_ldap

  - name: Setup simple authentication
    template:
      src: auth-client.sh.j2
      dest: "{{openvpn_etcdir}}/auth-client.sh"
      mode: 0755
    when: openvpn_simple_auth and openvpn_simple_auth_password
    notify: openvpn restart

  - name: Configure server
    template: src=server.conf.j2 dest={{openvpn_etcdir}}/server.conf
    notify: openvpn restart

  - name: Ensure openvpn key dir has the right permission
    file: path={{openvpn_keydir}} state=directory mode=0700 owner={{openvpn_user}}

  - name: Set ip forwarding in the sysctl file and reload if necessary
    sysctl: name="net.ipv4.ip_forward" value=1 sysctl_set=yes state=present reload=yes
  when: not openvpn_only_keys
